/*
    Copyright 2022 Terso Solutions, Inc.

  Licensed under the Apache License, Version 2.0 (the "License");
  you may not use this file except in compliance with the License.
  You may obtain a copy of the License at

      http://www.apache.org/licenses/LICENSE-2.0

  Unless required by applicable law or agreed to in writing, software
  distributed under the License is distributed on an "AS IS" BASIS,
  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  See the License for the specific language governing permissions and
  limitations under the License.
*/

using System;
using System.Collections.Generic;
using System.Threading.Tasks;
using TersoSolutions.Jetstream.Sdk.Objects;

namespace TersoSolutions.Jetstream.Sdk
{
    /// <summary>
    /// A contract that specifies the properties and actions for a Jetstream client. It is
    /// intended to provide the authentication requirements and action necessary to return
    /// data from a Jetstream instance.
    /// </summary>
    public interface IJetstreamClient : IDisposable
    {
        #region Events Methods

        /// <summary>
        /// Makes a GET request to the /events endpoint to retrieve a series of events
        /// </summary>
        /// <param name="limit"></param>
        /// <param name="searchDevice"></param>
        /// <param name="searchType"></param>
        /// <param name="sortBy"></param>
        /// <returns>EventsDto</returns>
        Task<EventsDto> GetEventsAsync(int limit = 100, string searchDevice = "", string searchType = "", string sortBy = "");

        /// <summary>
        /// Makes a DELETE request to the /events endpoint that will delete events based on the batch id or array of event ids parameters.
        /// </summary>
        /// <param name="deleteEventsDto"></param>
        Task DeleteEventsAsync(DeleteEventsDto deleteEventsDto);

        #endregion

        #region Device Definition Methods

        /// <summary>
        /// Makes a GET request to the /devicedefinitions endpoint. Returns a list of device definitions in the body of the response.
        /// </summary>
        /// <param name="searchId"></param>
        /// <param name="searchName"></param>
        /// <param name="searchFirmwareVersion"></param>
        /// <param name="searchGetConfigValuesCommand"></param>
        /// <param name="searchSetConfigValuesCommand"></param>
        /// <param name="searchGetEpcListCommand"></param>
        /// <param name="searchResetCommand"></param>
        /// <param name="searchUpdateFirmwareCommand"></param>
        /// <param name="sortBy"></param>
        /// <returns></returns>
        Task<List<DeviceDefinitionsDto>> GetDeviceDefinitionsAsync(string searchId = "", string searchName = "", string searchFirmwareVersion = "", string searchGetConfigValuesCommand = "",
            string searchSetConfigValuesCommand = "", string searchGetEpcListCommand = "", string searchResetCommand = "", string searchUpdateFirmwareCommand = "", string sortBy = "");

        /// <summary>
        /// Makes a GET request to the /devicedefinitions/{Name} endpoint. This method responds with a device definition matching the name, or a 404 if it is not found.
        /// </summary>
        /// <param name="deviceDefinitionName"></param>
        /// <returns></returns>
        Task<DeviceDefinitionsDto> GetDeviceDefinitionAsync(string deviceDefinitionName);

        /// <summary>
        /// Makes a GET request to the /devicedefinitions/OldId/{guid} endpoint. Returns new device definition object that contains the autogenerated integer id.
        /// </summary>
        /// <param name="oldId"></param>
        /// <returns>DeviceDefinitionsDto</returns>
        Task<DeviceDefinitionsDto> GetNewDeviceDefinitionIdAsync(string oldId);

        #endregion

        #region Region Methods

        /// <summary>
        /// Makes a GET request to the /regions endpoint. Returns a list of device regions in the body of the response.
        /// </summary>
        /// <returns></returns>
        Task<List<string>> GetRegionsAsync();

        #endregion

        #region Policy Methods

        /// <summary>
        /// Makes a POST request to the /policies endpoint, adding a new policy. If successful it returns information about the new policy.
        /// </summary>
        /// <param name="policy"></param>
        /// <returns>PoliciesDto</returns>
        Task<PoliciesDto> AddPolicyAsync(PoliciesDto policy);

        /// <summary>
        /// Makes a GET request to the /policies endpoint. Returns a list of policies in the body of the response.
        /// </summary>
        /// <param name="searchId"></param>
        /// <param name="searchName"></param>
        /// <param name="searchDeviceDefinition"></param>
        /// <param name="sortBy"></param>
        /// <returns></returns>
        Task<List<PoliciesDto>> GetPoliciesAsync(string searchId = "", string searchName = "", string searchDeviceDefinition = "", string sortBy = "");

        /// <summary>
        /// Makes a GET request to the /policies/{Name} endpoint. This method responds with a policy matching the name, or a 404 if it is not found.
        /// </summary>
        /// <param name="policyName"></param>
        /// <returns></returns>
        Task<PoliciesDto> GetPolicyAsync(string policyName);

        /// <summary>
        /// Makes a DELETE request to the /policies/{Name} endpoint to delete an existing policy.
        /// </summary>
        /// <param name="policyName"></param>
        Task DeletePolicyAsync(string policyName);

        /// <summary>
        /// Makes a PUT request to the /policies/{Name} endpoint to update an existing policy. If successful it returns the current state of the policy.
        /// </summary>
        /// <param name="policy"></param>
        /// <param name="policyName"></param>
        /// <returns></returns>
        Task<PoliciesDto> UpdatePolicyAsync(PoliciesDto policy, string policyName);

        #endregion

        #region Alias Methods

        /// <summary>
        /// Makes a POST request to the /aliases endpoint to create an alias. If successful it returns the new alias' information. 
        /// </summary>
        /// <param name="alias"></param>
        Task<AliasDto> AddAliasAsync(AliasDto alias);

        /// <summary>
        /// Makes a PUT request to the /aliases/{Name} endpoint to create an alias. If successful it returns the current state of the alias in Jetstream.
        /// </summary>
        /// <param name="aliasName"></param>
        /// <param name="aliasWithNewValues"></param>
        Task<AliasDto> ModifyAliasAsync(string aliasName, AliasDto aliasWithNewValues);

        /// <summary>
        /// Makes a GET request to the /aliases endpoint, returning all aliases.
        /// </summary>
        /// <returns></returns>
        /// <param name="searchId"></param>
        /// <param name="searchName"></param>
        /// <param name="searchRegion"></param>
        /// <param name="sortBy"></param>
        Task<List<AliasDto>> GetAliasesAsync(string searchId = "", string searchName = "", string searchRegion = "", string sortBy = "");

        /// <summary>
        /// Makes a GET request to the /aliases/{Name} endpoint, asking for a specific alias by name. Returns the requested alias, if it exists.
        /// </summary>
        /// <param name="aliasName"></param>
        /// <returns></returns>
        Task<AliasDto> GetAliasAsync(string aliasName);

        /// <summary>
        /// Makes a GET request to the aliases/property/names endpoint, returning the names of all aliases. Does not return any other data on the aliases.
        /// </summary>
        /// <returns></returns>
        Task<List<string>> GetAliasNamesAsync();

        /// <summary>
        /// Makes a DELETE request to the /aliases/{Name} endpoint, deleting the requested alias.
        /// </summary>
        /// <param name="aliasName"></param>
        Task DeleteAliasAsync(string aliasName);

        #endregion

        #region Device Methods

        /// <summary>
        /// Makes a POST request to the /devices Jetstream endpoint to create a new device in your application. If successful it returns the new device's information.
        /// </summary>
        /// <param name="device"></param>
        /// <returns>DevicesDto</returns>
        Task<DevicesDto> AddDeviceAsync(DevicesDto device);

        /// <summary>
        /// Makes a PUT request to the /devices/{deviceName} Jetstream endpoint to update an existing device. If successful it returns the current state of the device in Jetstream.
        /// </summary>
        /// <param name="deviceName"></param>
        /// <param name="device"></param>
        /// <returns>DevicesDto</returns>
        Task<DevicesDto> ModifyDeviceAsync(string deviceName, DevicesDto device);

        /// <summary>
        /// Makes a DELETE request to the /devices/{deviceName} endpoint and removes a device from your application.
        /// </summary>
        /// <param name="deviceName"></param>
        Task DeleteDeviceAsync(string deviceName);

        /// <summary>
        /// Makes a GET request to the /devices endpoint, returning a list of devices and their properties.
        /// </summary>
        /// <param name="searchId"></param>
        /// <param name="searchName"></param>
        /// <param name="searchSerialNumber"></param>
        /// <param name="searchDeviceDefinition"></param>
        /// <param name="searchRegion"></param>
        /// <param name="searchPolicy"></param>
        /// <param name="sortBy"></param>
        /// <returns>List of DevicesDto</returns>
        Task<List<DevicesDto>> GetDevicesAsync(string searchId = "", string searchName = "", string searchSerialNumber = "",
            string searchDeviceDefinition = "", string searchRegion = "", string searchPolicy = "", string sortBy = "");

        /// <summary>
        /// Makes a GET request to the /devices/{name} endpoint, returning a specified device.
        /// </summary>
        /// <param name="deviceName"></param>
        /// <returns>DevicesDto</returns>
        Task<DevicesDto> GetDeviceAsync(string deviceName);

        /// <summary>
        /// Makes a GET request to the /devices/{deviceName}/status endpoint to retrieve the status of the specified device.
        /// </summary>
        /// <param name="deviceName"></param>
        /// <returns></returns>
        Task<DeviceStatusDto> GetDeviceStatusAsync(string deviceName);

        #endregion

        #region Device Command Methods

        /// <summary>
        /// Makes a GET request to the /devices/{deviceName}/epclist endpoint. This endpoint triggers a device to perform an Object Event scan.
        /// </summary>
        /// <param name="deviceName"></param>
        /// <returns>CommandResponseDto</returns>
        Task<CommandResponseDto> SendGetEpcListCommandAsync(string deviceName);

        /// <summary>
        /// Makes a Post request to the /devices/{deviceName}/reset endpoint. This endpoint triggers the device to restart.
        /// </summary>
        /// <param name="deviceName"></param>
        /// <returns>CommandResponseDto</returns>
        Task<CommandResponseDto> SendResetCommandAsync(string deviceName);

        /// <summary>
        /// Makes a POST request to the /devices/{deviceName}/version endpoint. This is used to update the firmware version of the reader or agent.
        /// </summary>
        /// <param name="deviceName"></param>
        /// <param name="versionDto"></param>
        /// <returns>CommandResponseDto</returns>
        Task<CommandResponseDto> SendVersionCommandAsync(string deviceName, VersionDto versionDto);

        /// <summary>
        /// Makes a POST request to the /devices/{deviceName}/lockdown endpoint. This endpoint triggers the device to go into lockdown.
        /// </summary>
        /// <param name="deviceName"></param>
        /// <param name="lockdownDto"></param>
        /// <returns></returns>
        Task<CommandResponseDto> SendLockdownCommandAsync(string deviceName, LockdownDto lockdownDto);

        /// <summary>
        /// Makes a POST request to the /devices/{deviceName}/unlockdoor endpoint. This endpoint triggers the door to unlock on a device.
        /// </summary>
        /// <param name="deviceName"></param>
        /// <param name="unlockDoorDto"></param>
        /// <returns></returns>
        Task<CommandResponseDto> SendUnlockDoorCommandAsync(string deviceName, UnlockDoorDto unlockDoorDto);

        /// <summary>
        /// Makes a GET request the /devices/{deviceName}/ApplicationValues endpoint.
        /// This endpoint instructs the specified application on a device to return the current values for its configuration parameters.
        /// </summary>
        /// <param name="parameters"></param>
        /// <param name="deviceName"></param>
        /// <returns></returns>
        Task<CommandResponseDto> SendGetApplicationValuesAsync(List<string> parameters, string deviceName);

        /// <summary>
        /// Makes a POST request the /devices/{deviceName}/ApplicationValues endpoint.
        /// This endpoint instructs the specified application on a device to set the values for its configuration parameters.
        /// </summary>
        /// <param name="appConfigValuesDto"></param>
        /// <param name="deviceName"></param>
        /// <returns></returns>
        Task<CommandResponseDto> SendSetApplicationValuesAsync(AppConfigValuesCommandDto appConfigValuesDto, string deviceName);

        /// <summary>
        /// Makes a POST request to the /devices/{deviceName}/ApplicationVersion endpoint.
        /// This endpoint instructs the application running on a device to update using the url provided.
        /// </summary>
        /// <param name="appVersion"></param>
        /// <param name="deviceName"></param>
        /// <returns></returns>
        Task<CommandResponseDto> SendUpdateApplicationVersionAsync(ApplicationVersionDto appVersion, string deviceName);

        #endregion

        #region Device Policy Methods

        /// <summary>
        /// Makes a POST request to the /devices/{deviceName}/policy endpoint to add a device to one of your application's policies.
        /// </summary>
        /// <param name="deviceName"></param>
        /// <param name="devicesPolicy"></param>
        /// <returns>DevicesPolicyDto</returns>
        Task<DevicesPolicyDto> AddDeviceToPolicyAsync(string deviceName, DevicesPolicyDto devicesPolicy);

        /// <summary>
        /// Makes a GET request to the /devices/{deviceName}/policy endpoint to get the device's policy, if there is one.
        /// </summary>
        /// <param name="deviceName"></param>
        /// <returns>DevicesPolicyDto</returns>
        Task<DevicesPolicyDto> GetDevicePolicyAsync(string deviceName);

        /// <summary>
        /// Makes a DELETE request to the /devices/{deviceName}/policy endpoint to remove an existing device from a policy.
        /// </summary>
        /// <param name="deviceName"></param>
        Task RemoveDeviceFromPolicyAsync(string deviceName);

        /// <summary>
        /// Makes a POST request to the /devices/{deviceName}/policy/sync endpoint. This endpoint causes the current device policy to be sent to the device.
        /// </summary>
        /// <param name="deviceName"></param>
        /// <returns>CommandResponseDto</returns>
        Task<CommandResponseDto> SyncDevicePolicyAsync(string deviceName);

        /// <summary>
        /// Makes a GET request to /devices/{deviceName}/policy/sync endpoint. This endpoint causes the device to send back the current policy is it synced with if any.
        /// </summary>
        /// <param name="deviceName"></param>
        /// <returns>CommandResponseDto</returns>
        Task<CommandResponseDto> GetSyncedDevicePolicyAsync(string deviceName);

        #endregion

        #region Device Credentials Methods

        /// <summary>
        /// Makes a POST request to the /devices/{deviceName}/credentials/{credentialType} endpoint, appending the passed in credentials to the specified type's list.
        /// Returns the current state of the credentials.
        /// </summary>
        /// <param name="deviceName"></param>
        /// <param name="type"></param>
        /// <param name="credentials"></param>
        /// <returns></returns>
        Task<List<string>> AddDeviceCredentialsAsync(string deviceName, DeviceCredentialTypes type, List<string> credentials);

        /// <summary>
        /// Makes a POST request to the /devices/{deviceName}/credentials/{credentialType} endpoint, appending the passed in credentials to the specified type's dictionary.
        /// Returns the current state of the credentials keys.
        /// </summary>
        /// <param name="deviceName"></param>
        /// <param name="type"></param>
        /// <param name="credentials"></param>
        /// <returns></returns>
        Task<List<string>> AddDeviceCredentialsAsync(string deviceName, DeviceCredentialTypes type, Dictionary<string, string> credentials);

        /// <summary>
        /// Makes a PUT request to the /devices/{deviceName}/credentials/{credentialType} endpoint, overwriting the specified type's existing list with the passed in list.
        /// Returns the current state of the credentials.
        /// </summary>
        /// <param name="deviceName"></param>
        /// <param name="type"></param>
        /// <param name="credentials"></param>
        /// <returns></returns>
        Task<List<string>> ModifyDeviceCredentialsAsync(string deviceName, DeviceCredentialTypes type, List<string> credentials);

        /// <summary>
        /// Makes a PUT request to the /devices/{deviceName}/credentials/{credentialType} endpoint, overwriting 
        /// the specified type's existing dictionary with the passed in dictionary.
        /// Returns the current state of the credentials keys.
        /// </summary>
        /// <param name="deviceName"></param>
        /// <param name="type"></param>
        /// <param name="credentials"></param>
        /// <returns></returns>
        Task<List<string>> ModifyDeviceCredentialsAsync(string deviceName, DeviceCredentialTypes type, Dictionary<string, string> credentials);

        /// <summary>
        /// Makes a GET request to the /devices/{deviceName}/credentials/{credentialType} endpoint, returning the specified credentials (keys only, if dictionary) from the
        /// specified type's existing list or dictionary.
        /// </summary>
        /// <param name="deviceName"></param>
        /// <param name="type"></param>
        /// <returns></returns>
        Task<List<string>> GetDeviceCredentialsAsync(string deviceName, DeviceCredentialTypes type);

        /// <summary>
        /// Makes a DELETE request to the /devices/{deviceName}/credentials/{credentialType} endpoint, removing the specified credentials (by key, if dictionary) from the
        /// specified type's existing list or dictionary.
        /// Returns the current state of the credentials.
        /// </summary>
        /// <param name="deviceName"></param>
        /// <param name="type"></param>
        /// <param name="credentials"></param>
        /// <returns></returns>
        Task<List<string>> DeleteDeviceCredentialsAsync(string deviceName, DeviceCredentialTypes type, List<string> credentials);

        /// <summary>
        /// Makes a POST request to the /devices/{deviceName}/credentials/Sync sync endpoint, sending a command to the specified device to update its credentials.
        /// </summary>
        /// <param name="deviceName"></param>
        /// <returns></returns>
        Task<CommandResponseDto> SyncDeviceCredentialsAsync(string deviceName);

        /// <summary>
        /// Makes a GET request to the /devices/{deviceName}/credentials/Sync sync endpoint, returning the DateTime of the last credential sync.
        /// </summary>
        /// <param name="deviceName"></param>
        /// <returns></returns>
        Task<DateTime?> GetLastDeviceCredentialSyncTimeAsync(string deviceName);

        #endregion
    }
}
